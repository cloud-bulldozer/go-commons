// Code generated by MockGen. DO NOT EDIT.
// Source: ocp-connector/ocp_connector.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dynamic "k8s.io/client-go/dynamic"
	kubernetes "k8s.io/client-go/kubernetes"
	rest "k8s.io/client-go/rest"
)

// MockK8SConnector is a mock of K8SConnector interface.
type MockK8SConnector struct {
	ctrl     *gomock.Controller
	recorder *MockK8SConnectorMockRecorder
}

// MockK8SConnectorMockRecorder is the mock recorder for MockK8SConnector.
type MockK8SConnectorMockRecorder struct {
	mock *MockK8SConnector
}

// NewMockK8SConnector creates a new mock instance.
func NewMockK8SConnector(ctrl *gomock.Controller) *MockK8SConnector {
	mock := &MockK8SConnector{ctrl: ctrl}
	mock.recorder = &MockK8SConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8SConnector) EXPECT() *MockK8SConnectorMockRecorder {
	return m.recorder
}

// ClientSet mocks base method.
func (m *MockK8SConnector) ClientSet() kubernetes.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientSet")
	ret0, _ := ret[0].(kubernetes.Interface)
	return ret0
}

// ClientSet indicates an expected call of ClientSet.
func (mr *MockK8SConnectorMockRecorder) ClientSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientSet", reflect.TypeOf((*MockK8SConnector)(nil).ClientSet))
}

// DynamicClient mocks base method.
func (m *MockK8SConnector) DynamicClient() dynamic.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DynamicClient")
	ret0, _ := ret[0].(dynamic.Interface)
	return ret0
}

// DynamicClient indicates an expected call of DynamicClient.
func (mr *MockK8SConnectorMockRecorder) DynamicClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DynamicClient", reflect.TypeOf((*MockK8SConnector)(nil).DynamicClient))
}

// RestConfig mocks base method.
func (m *MockK8SConnector) RestConfig() *rest.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestConfig")
	ret0, _ := ret[0].(*rest.Config)
	return ret0
}

// RestConfig indicates an expected call of RestConfig.
func (mr *MockK8SConnectorMockRecorder) RestConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestConfig", reflect.TypeOf((*MockK8SConnector)(nil).RestConfig))
}
